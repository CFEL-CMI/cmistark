#!/usr/bin/env python
# -*- coding: utf-8; fill-column: 120 -*-
#
# This file is part of CMIstark
# Copyright (C) 2009,2011,2012,2013,2020 Jochen Küpper <jochen.kuepper@cfel.de>
# Copyright (C) 2012,2013 Yuan-Pin Chang <yuan.pin.chang@cfel.de>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# If you use this programm for scientific work, you must correctly reference it; see LICENSE file for details.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# <http://www.gnu.org/licenses/>.


"""Calculate adiabatic energy curves and store them in a HDF5 file

Copyright (C) 2008,2009,2011,2012,2013,2020 Jochen Küpper

This is a simple driver around the functionality in the import modules of the CMIstark Python extension. It allows user
interaction and defines the actual molecular properties used in the calculations. The constants should not be changed -
unless there is a real bug, instead you should consider to create "isomers" for new constants sets coming up with time.
"""

__author__ = "Jochen Küpper <jochen.kuepper@cfel.de>"

import numpy as num
import getopt, sys
import cmistark.convert
import cmistark.moleculeparameters
import cmistark.starkeffect as starkeffect
from cmistark.moleculeparameters import *


def usage():
    # ToDo implement a useful usage description -- use argparse instead of getopt to auto-create it
    print("""
           --help:      print this help
           --dc-fields: specify the range of the DC elecric field (in kV/cm):
                        start:end:step (example: --dc-fields=0:150:151)
           --Jmax_calc: specify the maximum value of J included in the calculation
           --Jmax_save: specify the maximum value of J of Stark curves saved in the output file
           --<moleculename>: specify which molecule is used in the calculation
           --Jmin:      specify the minimum value of J included in the calculation
           --Mmax:      specify the maximum value of M included in the calculation
           --isomer:    specify which isomer is used, when <moleculename> have more than
                        one isomers defined in moleculeparameter.py
""")

def main(args):
    try:
        opts, args = getopt.getopt(args[1:], "h", ["help", "debug",
                                                   "Jmin=", "Jmax_calc=", "Jmax_save=", "Mmax=",
                                                   "dc-fields=", "isomer=",
                                                   "oblate_symmetric_top",
                                                   "prolate_symmetric_top",
                                                   "asymmetric_top",
                                                   "2,6-difluoro-iodobenzene",
                                                   "3-aminophenol",
                                                   "2-aminobenzonitrile", "3-aminobenzonitrile", "4-aminobenzonitrile",
                                                   "adenine",
                                                   "benzonitrile",
                                                   "glycine",
                                                   "indole", "indole-water", "indole-water2",
                                                   "iodobenzene",
                                                   "iodomethane",
                                                   "diiodoethane",
                                                   "MVK",
                                                   "OCS",
                                                   "phenylpyrrole",
                                                   "water", "H2O", "D2O", "HDO",
                                                   "water2",
                                                   "water3","water-trimer",
                                                   "water4","water-tetramer",
                                                   "water5","water-pentamer",
                                                   "water6cage", "water6prism", "water6book", "water6", "water-hexamer", "water-hexamer1", "water-hexamer2"
                                                   "water-heptamer","water7", "water-heptamer1",
                                                   "sulfur_dioxide", "SO2",
                                                   "nitrogen_dioxide", "NO2",
                                                   "nitrous_oxide",
                                                   "3-fluorophenol",
                                                   "6-chloropyridazine-3-carbonitrile",
                                                   "sulfur_monoxide", "SO",
                                                   "carbon_monoxide", "CO",
                                                   "uracil",
                                                   "5-cyanoindole",
                                                   "mephenesin",
                                                   "5-fluoroindole",
                                                   "hydrogen","H2",
                                                   "methane","CH4",
                                                   "hydrogen_deuteride","HD",
                                                   "deuterium","D2",
                                                   "ammonia",
                                                   "ammonia_dimer",
                                                   "apcn"
                                                   ])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err)) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    # default values
    pfunc = None
    param = cmistark.starkeffect.CalculationParameter
    param.dcfields = cmistark.convert.kV_cm2V_m(num.linspace(0., 100., 3))
    param.isomer = 0
    param.Jmin = 0
    param.Jmax_calc = 5
    param.Jmax_save = 2
    param.M = None
    param.type = 'A'
    # scan commandline
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o == "--debug":
            param.debug = True
        elif o == "--Mmax":
            param.M = list(range(0, int(a)+1))
        elif o == "--Jmin":
            param.Jmin = int(a)
        elif o == "--Jmax_calc":
            param.Jmax_calc = int(a)
        elif o == "--Jmax_save":
            param.Jmax_save = int(a)
        elif o == "--dc-fields":
            min, max, steps = a.split(":")
            param.dcfields = cmistark.convert.kV_cm2V_m(num.linspace(float(min), float(max), int(steps)))
        elif o == "--isomer":
            param.isomer = int(a)
        elif o == "--asymmetric_top":
            pfunc = asymmetric_top
        elif o == "--2,6-difluoro-iodobenzene":
            pfunc = difluoro_iodobenzene
        elif o in ("--3-aminophenol"):
            pfunc = three_aminophenol
        elif o in "--3-fluorophenol":
            pfunc = three_fluorophenol
        elif o == "--2-aminobenzonitrile":
            pfunc = two_aminobenzonitrile
        elif o == "--3-aminobenzonitrile":
            pfunc = three_aminobenzonitrile
        elif o == "--4-aminobenzonitrile":
            pfunc = four_aminobenzonitrile
        elif o == "--5-cyanoindole":
            pfunc = five_cyanoindole
        elif o == "--5-fluoroindole":
            pfunc = five_fluoroindole
        elif o == "--adenine":
            pfunc = adenine
        elif o == "--benzonitrile":
            pfunc = benzonitrile
        elif o == "--glycine":
            pfunc = glycine
        elif o == "--iodobenzene":
            pfunc = iodobenzene
        elif o == "--OCS":
            pfunc = OCS
        elif o == "--oblate_symmetric_top":
            pfunc = oblate_symmetric_top
        elif o == "--prolate_symmetric_top":
            pfunc = prolate_symmetric_top
        elif o == "--iodomethane":
            pfunc= iodomethane
        elif o == "--diiodoethane":
            pfunc= diiodoethane
        elif o == "--indole":
            pfunc = indole
        elif o == "--indole-water":
            pfunc = indole_water1
        elif o == "--indole-water2":
            pfunc = indole_water2
        elif o == "--mephenesin":
            pfunc = mephenesin
        elif o == "--MVK":
            pfunc = MVK
        elif o == "--phenylpyrrole":
            pfunc = phenylpyrrole
        elif o in ("--D2O", "--H2O", "--HDO", "--water"):
            if o in ("--H2O", "--water"):
                param.isomer = 0
            elif o == "--D2O":
                param.isomer = 1
            elif o == "--HDO":
                param.isomer = 2
            pfunc = water
        elif o in ("--sulfur_dioxide", "--SO2"):
            pfunc = sulfur_dioxide
        elif o in ("--nitrogen_dioxide", "--NO2"):
            pfunc = nitrogen_dioxide
        elif o == "--nitrous_oxide":
            pfunc = nitrous_oxide
        elif o == "--6-chloropyridazine-3-carbonitrile":
            pfunc = six_chloropyridazine_three_carbonitrile
        elif o in ("--sulfur_monoxide", "--SO"):
            pfunc = sulfur_monoxide
        elif o in ("--carbon_monoxide", "--CO"):
            pfunc = carbon_monoxide
        elif o in ("--uracil"):
            pfunc = uracil
        elif o in ("--water2"):
            pfunc = water_dimer
        elif o in ("--hydrogen", "--H2"):
            pfunc = hydrogen
        elif o in ("--hydrogen_deuteride", "--HD"):
            pfunc = hydrogen_deuteride
        elif o in ("--deuterium", "--D2"):
            pfunc = deuterium
        elif o in ("--methane", "--CH4"):
            pfunc = methane
        elif o in ("--ammonia"):
            pfunc = ammonia
        elif o in ("--ammonia_dimer"):
            pfunc = ammonia_dimer
        elif o in ("--apcn"):
                pfunc = apcn
        else:
            assert False, "unhandled commandline option"
    # finalize initialization
    if None != pfunc:
        pfunc(param)
    if None == param.M:
        param.M = list(range(0, param.Jmax_save+1))
    if param.Jmax_save > param.Jmax_calc:
        param.Jmax_save = param.Jmax_calc

    # perform calculation
    mol = molecule.Molecule(storage=param.name+".molecule", name=param.name)
    mol.starkeffect_calculation(param)
    # close file
    del mol

if __name__ == "__main__":
    main(sys.argv)
