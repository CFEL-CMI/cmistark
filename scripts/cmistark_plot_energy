#!/usr/bin/env python
# -*- coding: utf-8; fill-column: 120 -*-
#
# This file is part of CMI Python extensions
# Copyright (C) 2009,2011,2012,2013 Jochen Küpper <jochen.kuepper@cfel.de>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# If you use this programm for scientific work, you must correctly reference it; see LICENSE file for details.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# <http://www.gnu.org/licenses/>.


"""Plot adiabatic energy curves from HDF5 files to matplotlib graph

Copyright (C) 2009,2011,2012,2013 Jochen Küpper"""

__author__ = "Jochen Küpper <jochen.kuepper@cfel.de>"

import numpy as num
import getopt, sys
import matplotlib.pyplot as plt

import cmistark.molecule as molecule
from cmiext.convert import *
from cmiext.state import State


def usage():
    # ToDo implement a useful usage description
    print("""
           --help: help
           --Jmin:      specify the minimum value of J
           --Jmax:      specify the maximum value of J
           --Mmin:      specify the minimum value of M
           --Mmax:      specify the maximum value of M
           --isomer:    specify which isomer is used, when <moleculename> has
                        more than one isomers defined in moleculeparameter.py
           --states=: specify states to plot, format: "000,1010"
           --dipole: plot the effective dipole moments
           --energy-unit=: GHz, MHz, invcm, J
           --dipole-unit=: GHz, MHz, invcm, J, Debye
           --nss-forbidden
          """)


def main(args):
    try:
        opts, args = getopt.getopt(args[1:], "h", ["help", "Jmin=", "Jmax=", "Mmin=", "Mmax=", "Kamax=", "states=",
                                                   "energy-unit=", "GHz",
                                                   "dipole", "isomer=", "dipole-unit=",
                                                   "nss-forbidden=",
                                                   "legend", "verbose="])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err)) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    # default values
    Jmin = 0
    Jmax = 5
    Mmin = 0
    Mmax = None
    Kamax= None
    isomer = [0]
    userstates = None
    energyunit = "MHz" # energy unit
    dipoleunit = "MHz"
    energyconversion = J2MHz
    energyunitlabel = "MHz"
    nss_forbidden = None
    legend = False
    plotdips = False
    verbose = False
    # scan commandline
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o == "--Jmin":
            Jmin = int(a)
        elif o == "--Jmax":
            Jmax = int(a)
        elif o == "--Mmin":
            Mmin = int(a)
        elif o == "--Mmax":
            Mmax = int(a)
        elif o == "--Kamax":
            Kamax = int(a)
        elif o == "--isomer":
            isomer = []
            for i in a.split(','):
                isomer.append(int(i))
        elif o == "--states": # quantum states to plot, format "000,1010"
            userstates = a    # uses m if given, uses all possible m otherwise
        elif o in ("--energy-unit", "--GHz" ):
            if o == "--energy-unit":
                energyunit = a
            elif o == "--GHz":
                energyunit = "GHz"
            if (energyunit != "MHz" and energyunit != "GHz" and energyunit != "invcm" and energyunit != "J"):
                assert False, "unknown energy unit"
            # set conversion function and unit-string for plot axes
            if (energyunit=="J"):
                energyconversion = lambda x: x
                energyunitlabel = "J"
            elif (energyunit=="MHz"):
                energyconversion = J2MHz
                energyunitlabel = "MHz"
            elif (energyunit=="GHz"):
                energyconversion = lambda x: J2MHz(x)/1000.
                energyunitlabel = "GHz"
            elif (energyunit=="invcm"):
                energyconversion = J2invcm
                energyunitlabel = "cm$^{-1}$"
        elif o == "--dipole-unit":
            dipoleunit = a
        elif o == "--nss-forbidden": # plot dipolemoments
            nss_forbidden = a
        elif o == "--dipole": # plot dipolemoments
            plotdips = True
        elif o == "--verbose":
            verbose = True
        elif o == "--legend":
            legend = True
        else:
            assert False, "unhandled commandline option"
    if None == Mmax:
        Mmax = Jmax
    if None == Kamax:
        Kamax = Jmax

    colors = ['blue', 'red', 'green', 'black', 'purple', 'cyan', 'magenta', 'brown']
    colorindex = 0

    # loop over all remaining arguments -- asumming its filenames of HDF5 Stark-files
    for name in args:
        # create Molecule object and specify storage file
        mol = molecule.Molecule(storage=name)
        # handle colors
        if colorindex > len(colors):
            colorindex = 0
        color = colors[colorindex]
        plt.xlabel('$\epsilon$ (kV/cm)')
        plt.ylabel('W (' + energyunitlabel + ')')
        # plot energie
        # use user given states, if available
        if None != userstates:
            for userstate in userstates.split(","):
                # if no m-value is specified, take all M=J values
                mValues = list(range(0,int(userstate[0])+1,1))
                # if a certain m is desired only take this one
                if (len(userstate)>3):
                    mValues = [int(userstate[3])]
                for iso in isomer:
                    for m in mValues:
                        if colorindex > len(colors)-1: colorindex = 0
                        color = colors[colorindex]
                        colorindex += 1
                        state = State(int(userstate[0]),int(userstate[1]),int(userstate[2]), m, iso)
                        if (verbose):
                            print("state to plot: " + state.name())
                        fields, energies = mol.starkeffect(state)
                        # convert energy
                        energies = energyconversion(energies)
                        plt.figure(1)
                        plt.plot(V_m2kV_cm(fields), energies, color, label=state.name())
                        if legend: plt.legend()
                        print("state, color: " + state.name() + " " + color)
                        if plotdips == True:
                            fields, mueff = mol.mueff(state)
                            plt.figure(2)
                            plt.plot(V_m2kV_cm(fields), J2Hz(mueff) / 1e6 / V_m2kV_cm(1), color)
        # plot all states in given J-range
        else:
            # loop over state
            for state in mol.starkeffect_states():
                if Mmin <= abs(state.M()) <= Mmax and Jmin <= state.J() <= Jmax and state.Ka() <= Kamax \
                   and state.isomer() in isomer and 0 < state.nssw(nss_forbidden):
                    if colorindex > len(colors)-1: colorindex = 0
                    color = colors[colorindex]
                    colorindex += 1
                    fields, energies = mol.starkeffect(state)
                    fields, mueff = mol.mueff(state)
                    assert len(fields) == len(energies) and  len(fields) == len(mueff), "HDF5 storage file is corrupted"
                    # print fields, energies, mueff
                    # convert energy
                    energies = energyconversion(energies)
                    plt.figure(1)
                    plt.plot(V_m2kV_cm(fields), energies, color, label=state.name())
                    if legend: plt.legend()
                    if plotdips == True:
                        plt.figure(2)
                        if dipoleunit == "invcm":
                            plt.plot(V_m2kV_cm(fields), J2Hz(mueff) / (29979 * 1e6) / V_m2kV_cm(1), color)
                            plt.ylabel("$\mu_{eff}$ (cm$^{-1}$/kV/cm)")
                            plt.xlabel('$\epsilon$ (kV/cm)')
                        elif dipoleunit == "MHz":
                            plt.plot(V_m2kV_cm(fields), J2Hz(mueff) / 1e6 / V_m2kV_cm(1), color)
                            plt.ylabel("$\mu_{eff}$ (MHz/kV/cm)")
                            plt.xlabel('$\epsilon$ (kV/cm)')
                        elif dipoleunit == "GHz":
                            plt.plot(V_m2kV_cm(fields), J2Hz(mueff) / 1e9 / V_m2kV_cm(1), color)
                            plt.ylabel("$\mu_{eff}$ (GHz/kV/cm)")
                            plt.xlabel('$\epsilon$ (kV/cm)')
                        elif dipoleunit == "J":
                            plt.plot(V_m2kV_cm(fields), mueff / V_m2kV_cm(1), color)
                            plt.ylabel("$\mu_{eff}$ (J/kV/cm)")
                            plt.xlabel('$\epsilon$ (kV/cm)')
                        elif dipoleunit == "D":
                            plt.plot(V_m2kV_cm(fields), 2.998e24 * mueff / V_m2kV_cm(1), color)
                            plt.ylabel("$\mu_{eff}$ (D)")
                            plt.xlabel('$\epsilon$ (kV/cm)')
                        else:
                            print("Wrong dipole unit.")
    plt.savefig('test.pdf',dpi=300)
    plt.show()

if __name__ == "__main__":
    main(sys.argv)
