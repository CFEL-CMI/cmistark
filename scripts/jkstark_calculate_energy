#!/usr/bin/env python
# -*- coding: utf-8; fill-column: 120 -*-
#
# This file is part of JK Python extensions
# Copyright (C) 2009,2011,2012 Jochen Küpper <software@jochen-kuepper.de>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# If you use this programm for scientific work, you must correctly reference it; see LICENSE file for details.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# <http://www.gnu.org/licenses/>.
from __future__ import division

"""Calculate adiabatic energy curves and store them in HDF5 file

Copyright (C) 2008,2009,2011,2012 Jochen Küpper

This is a simple driver around the functionality in the import modules of the jkstark Python extension. It allows user
interaction and defines the actual molecular properties used in the calculations. The constants should not be changed -
unless there is a real bug, instead you should consider to create "isomers" for new constants sets coming up with time.
"""

__author__ = "Jochen Küpper <software@jochen-kuepper.de>"

import numpy as num
import getopt, sys
import jkstark.moleculeparameters

import jkext.convert as convert
import jkstark.molecule as molecule
import jkstark.starkeffect as starkeffect
from jkstark.moleculeparameters import *


def usage():
    # ToDo implement a useful usage description
    print """
           --help:      help
           --dc-fields: specify the range of the DC elecric field (in kV/cm) in a way such as start:end:step, example: --dc-fields=0:150:151
           --Jmax_calc: specify the maximum value of J included in the calculation
           --Jmax_save: specify the maximum value of J of Stark curves saved in the output file
           --<moleculename>: specify which molecule is used in the calculation
           --Jmin:      specify the minimum value of J included in the calculation
           --Mmax:      specify the maximum value of M included in the calculation
           --isomer:    specify which isomer is used, when <moleculename> have more than one isomers defined in moleculeparameter.py
          """

def main(args):
    try:
        opts, args = getopt.getopt(args[1:], "h", ["help", "Jmin=", "Jmax_calc=", "Jmax_save=", "Mmax=",
                                                   "dc-fields=", "isomer=",
                                                   "oblate",
                                                   "prolate",
                                                   "2,6-difluoro-iodobenzene",
                                                   "3-aminophenol",
                                                   "4-aminobenzonitrile",
                                                   "benzonitrile",
                                                   "glycine",
                                                   "indole", "indole-water", "indole-water2",
                                                   "iodobenzene",
                                                   "iodomethane",
                                                   "OCS",
                                                   "phenylpyrrole",
                                                   "water", "H2O", "D2O", "HDO",
                                                   "sulfur_dioxide",
                                                   "3-fluorophenol",
                                                   "6-chloropyridazine-3-carbonitrile"
                                                   ])
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    # default values
    pfunc = None
    param = starkeffect.CalculationParameter
    param.dcfields = convert.kV_cm2V_m(num.linspace(0., 100., 3))
    param.isomer = 0
    param.Jmin = 0
    param.Jmax_calc = 5
    param.Jmax_save = 2
    param.M = None
    param.type = 'A'
    # scan commandline
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o == "--Mmax":
            param.M = range(0, int(a)+1)
        elif o == "--Jmin":
            param.Jmin = int(a)
        elif o == "--Jmax_calc":
            param.Jmax_calc = int(a)
        elif o == "--Jmax_save":
            param.Jmax_save = int(a)
        elif o == "--dc-fields":
            min, max, steps = a.split(":")
            param.dcfields = convert.kV_cm2V_m(num.linspace(float(min), float(max), int(steps)))
        elif o == "--isomer":
            param.isomer = int(a)
        elif o == "--2,6-difluoro-iodobenzene":
            pfunc = difluoro_iodobenzene
        elif o in ("--3-aminophenol"):
            pfunc = three_aminophenol
        elif o in "--3-fluorophenol":
            pfunc = three_fluorophenol
        elif o == "--4-aminobenzonitrile":
            pfunc = aminobenzonitrile
        elif o == "--benzonitrile":
            pfunc = benzonitrile
	elif o == "--glycine":
            pfunc = glycine
        elif o == "--iodobenzene":
            pfunc = iodobenzene
        elif o == "--OCS":
            pfunc = OCS
        elif o == "--oblate":
            pfunc = oblate
        elif o == "--prolate":
            pfunc = prolate
        elif o == "--iodomethane":
            pfunc= iodomethane
        elif o == "--indole":
            pfunc = indole
        elif o == "--indole-water":
            pfunc = indole_water1
        elif o == "--indole-water2":
            pfunc = indole_water2
        elif o == "--phenylpyrrole":
            pfunc = phenylpyrrole
        elif o in ("--D2O", "--H2O", "--HDO", "--water"):
            if o in ("--H2O", "--water"):
                param.isomer = 0
            elif o == "--D2O":
                param.isomer = 1
            elif o == "--HDO":
                param.isomer = 2
            pfunc = water
        elif o == "--sulfur_dioxide":
            pfunc = sulfur_dioxide
        elif o == "--6-chloropyridazine-3-carbonitrile":
            pfunc = six_chloropyridazine_three_carbonitrile
        else:
            assert False, "unhandled commandline option"
    # finalize initialization
    if None != pfunc:
        pfunc(param)
    param.M = range(0, param.Jmax_save+1)

    # perform calculation
    mol = molecule.Molecule(storage=param.name+".molecule", name=param.name)
    mol.starkeffect_calculation(param)
    # close file
    del mol

if __name__ == "__main__":
    main(sys.argv)
