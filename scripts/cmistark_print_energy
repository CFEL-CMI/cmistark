#!/usr/bin/env python
# -*- coding: utf-8; fill-column: 120 -*-
#
# This file is part of JK Python extensions
# Copyright (C) 2009,2012,2013 Jochen Küpper <jochen.kuepper@cfel.de>
#
# This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# If you use this programm for scientific work, you must correctly reference it; see LICENSE file for details.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program. If not, see
# <http://www.gnu.org/licenses/>.


"""Print adiabatic energy curves from HDF5 file to commandline

Copyright (C) 2009,2012,2103 Jochen Küpper"""

__author__ = "Jochen Küpper <jochen.kuepper@cfel.de>"

import numpy as num
import getopt, sys

import cmistark.molecule as molecule
from cmiext.convert import *
from cmiext.state import State


def usage():
    # ToDo implement a useful usage description
    print("""
           --help:      help
           --Jmin:      specify the minimum value of J
           --Jmax:      specify the maximum value of J
           --Mmin:      specify the minimum value of M
           --Mmax:      specify the maximum value of M
           --Kamax:     specify the maximum value of Ka
           --isomer:    specify which isomer is used, when <moleculename> has
                        more than one isomers defined in moleculeparameter.py
""")


def main(args):
    try:
        opts, args = getopt.getopt(args[1:], "h", ["help", "Jmin=", "Jmax=", "Kamax=", "Mmin=", "Mmax=", "isomer="])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err)) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)
    # default values
    Jmin = 0
    Jmax = 2
    Mmin = 0
    Mmax = None
    Kamax = None
    isomer = 0
    # scan commandline
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o == "--Jmin":
            Jmin = int(a)
        elif o == "--Jmax":
            Jmax = int(a)
        elif o == "--Mmin":
            Mmin = int(a)
        elif o == "--Mmax":
            Mmax = int(a)
        elif o == "--Kamax":
            Kamax = int(a)
        elif o == "--isomer":
            isomer = int(a)
        else:
            assert False, "unhandled commandline option"
    if None == Mmax:
        Mmax = Jmax
    if None == Kamax:
        Kamax = Jmax

    # loop over all remaining arguments -- asumming they are filenames of HDF5 Stark-files
    for name in args:
        # create Molecule object and specify storage file
        mol = molecule.Molecule(storage=name)
        # loop over state
        for state in mol.starkeffect_states():
            if  Mmin <= abs(state.M()) <= Mmax and Jmin <= state.J() <= Jmax and state.Ka() <= Kamax and state.isomer() == isomer:
                print() # empty line for visual separation
                fields, energies = mol.starkeffect(state)
                fields, mueff = mol.mueff(state)
                assert len(fields) == len(energies) and  len(fields) == len(mueff), "HDF5 storage file is corrupted"
                print("# state:", state.name())
                for i in range(len(fields)):
                    print("%10g  %15g  %10g" % (V_m2kV_cm(fields[i]), J2Hz(energies[i]) / 1e6, J2Hz(mueff[i] / V_m2kV_cm(1)) / 1e6))


if __name__ == "__main__":
    main(sys.argv)
