CMIstark
========

This program can calculate, view, and analyze the energy
levels of adiabatic Stark energy curves of linear, symmetric
top and asymmetric top molecules. This programs is developed
by J. Jochen et al. from the Controlled Molecule Imaging
group (CMI).

* Prerequisities:

Computer: Any Macintosh, PC, or Linux/UNIX workstations
with a modern Python distribution.

The following external Python packages are also required:
 - numpy
 - scipy
 - PyTables
 - matplotlib

* Installation:

Installation is performed by executing the generic Python
install command:

python setup.py install

in the unpacked source code directory.

Alternatively, on Unix-like systems the provided shell-script
user-install.sh can be used to install the program.

* Usage:

1. cmistark_calculate_energy

Aprovide script file called cmistark_calculate_energy
performs the calculation, and it uses commands typed
on the command line. The descriptions of command-line
options are provided as following:

--help: help
--<moleculename>: specify which molecule is used in the
                  calculation.
--dc-fields=: specify the range of the DC electric field
             (in kV/cm) by the following way: start:end:step,
             example: --dc-fields=0:150:151.
--Jmax_calc=: specify the maximum value of J included
              in the calculation.
--Jmax_save=: specify the maximum value of J of Stark
              curves saved in the output file.
--Jmin=:      specify the minimum value of J included
              in the calculation.
--Mmax=:      specify the maximum value of M included
              in the calculation.
--isomer=:    specify which isomer is used, when
              <moleculename> have more than one isomers
              defined in moleculeparameter.py

Example of using cmistark_calculate_energy with options:

cmistark_calculate_energy --isomer=0 --Jmax_calc=40 --Jmax_save=20 --3-aminophenol --dc-fields=0:150:151

After executing this command line, the script will
use cmistark packages to calculate stark energies of
isomer 0 of 3-aminophenol up to J=40, and save
results up to J=20 in an output file called
3-aminophenol.molecule. The Stark curve of each quantum
state starts from 0 to 150kV/cm with a step of 1kV/cm.

The output file <moleculename>.molecule stores
Stark curve of individual quantum states in terms of
a data format called HDF5. Such file format can be
read directly by using PyTables packages in Python.
Two scripts in this program, cmistark_plot_energy and
cmistark_print_energy are provided to easily access
these <moleculename>.molecule files. Their options
and descriptions are provided below.

2. cmistark_plot_energy

The script file called cmistark_plot_energy can
access existing Stark files (<moleculename>.molecule)
and plot the stored curves.

options:
--help: help
--energy-unit=: specify the unit of energy,
                options: MHz, invcm, J
--Jmin=, --Jmax=: specify min. or max. value of J
--Mmin=, --Mmax=: specify min. or max. value of M
--Kamax=: specify max. value of Ka
--states=: specify states to plot, format: "000,1010"
--dipole: plot the effective dipole moments
--isomer=: specify which isomer to plot

example of using cmistark_plot_energy with options:

cmistark_plot_energy --Jmin=0 --Jmax=2 --Mmin=1 --Mmax=1 <moleculename>.molecule

3. cmistark_print energy

The script file called cmistark_print_energy can
access existing Stark files (<moleculename>.molecule)
and print the stored curves on the screen.

options:
--help: help
--Jmin=, --Jmax=: specify min. or max. value of J
--Kamax=: specify max. value of Ka
--Mmin=, --Mmax=: specify min. or max. value of M
--isomer=: specify which isomer to print

example of using cmistark_print_energy with options:

cmistark_plot_energy --Jmin=0 --Jmax=2 --Mmin=1 --Mmax=1 <moleculename>.molecule

* State labels of stored Stark curves

For linear and asymmetric tops, all curves of
nonzero M states are double degenerate, and only
states with positive M are stored. Values of J,
Ka and Kc are positives.

For symmetric tops, states having products of K and M
equal to +|KM| and -|KM| split in the DC electric
field. We label the states corresponding to -|KM|
with negative K values in the output file, as only
positive M states are stored. However, it should
be note that states with K>0 and M<0 can also yield
-|KM|. Thus, all curves of nonzero M states in
the output file are also double degenerate.

* Structure of <moleculename>.molecule

For each state (J,Ka,Kc,M,isomer), the Stark energy
as function of DC field strength is stored by the
following structures:

/_J/_Ka/_Kc/_M/_isomer/dcfield 
/_J/_Ka/_Kc/_M/_isomer/dcstarkenergy

The following example source code of Python shows
how to read the curve for the 00000 state from
<moleculename>.molecule by using PyTables:

import tables 
import numpy 
 
stark_file = "<moleculename>.molecule" 
 
f=tables.openFile(stark_file)  
 
print f #print the entire file structure 
 
array = f.getNode("/_0/_0/_0/_0/_0/dcstarkenergy")
#read the array from the dcstarkenergy folder in 0 0 0 0 state

print numpy.array(array.read()) 

* Descriptions of source code files:

Three files in lib folder provide all functions
used to calculate and then write/read Stark curves.
Above script files perform the calculations by
calling these functions. The basic descriptions
of each file in lib folder is provided as following:

- molecule.py: perform Stark effect calculation by calling
               functions from starkeffect.py and store
               results in an output file 

- moleculeparameter.py: contain all molecular parameters
                        of individual molecules

- starkeffect.py: contain all functions, equations
                  and algorithms required for calculating
                  Stark effect.
